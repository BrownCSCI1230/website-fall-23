import{j as e}from"../../chunk-14d409af.js";import{I as t}from"../../chunk-66c40c41.js";import{M as a}from"../../chunk-b66c7dfa.js";const c={title:"Lab 5"};function r(n){const s=Object.assign({nav:"nav",ol:"ol",li:"li",a:"a",main:"main",h1:"h1",p:"p",div:"div",code:"code",h2:"h2",strong:"strong",h3:"h3",em:"em",pre:"pre",span:"span",blockquote:"blockquote",ul:"ul","mjx-container":"mjx-container",svg:"svg",defs:"defs",path:"path",g:"g",use:"use",h4:"h4",style:"style"},n.components);return e.exports.jsxs(e.exports.Fragment,{children:[e.exports.jsx(s.nav,{className:"toc",children:e.exports.jsx(s.ol,{className:"toc-level toc-level-1",children:e.exports.jsxs(s.li,{className:"toc-item toc-item-h1",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h1",href:"#lab-5-parsing",children:"Lab 5: Parsing"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-2",children:[e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#introduction",children:"Introduction"}),e.exports.jsx(s.ol,{className:"toc-level toc-level-3",children:e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#objectives",children:"Objectives"})})})]}),e.exports.jsx(s.li,{className:"toc-item toc-item-h2",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#scene-data-vs-render-data",children:"Scene Data vs. Render Data"})}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#scene-data",children:"Scene Data"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-3",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#global-data",children:"Global Data"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#lights",children:"Lights"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#camera-data",children:"Camera Data"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#primitives",children:"Primitives"})})]})]}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#scene-graphs",children:"Scene Graphs"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-3",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#transformations",children:"Transformations"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#scene-graph-nodes",children:"Scene Graph Nodes"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#cumulative-transformation-matrices",children:"Cumulative Transformation Matrices"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#build-as-you-go",children:"Build-As-You-Go"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#practice-tree-traversal",children:"Practice Tree Traversal"})})]})]}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#render-data",children:"Render Data"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-3",children:[e.exports.jsxs(s.li,{className:"toc-item toc-item-h3",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#implementing-sceneparserparse",children:"Implementing SceneParser::parse()"}),e.exports.jsx(s.ol,{className:"toc-level toc-level-4",children:e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#traversing-the-scene-graph",children:"Traversing The Scene Graph"})})})]}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#testing-scenes",children:"Testing Scenes"})})]})]}),e.exports.jsx(s.li,{className:"toc-item toc-item-h2",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#extra-creating-your-own-3d-scenes",children:"Extra: Creating Your Own 3D Scene(s)"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h2",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#end",children:"End"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h2",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#submission",children:"Submission"})})]})]})})}),e.exports.jsxs(s.main,{children:[`
`,`
`,e.exports.jsx(s.h1,{id:"lab-5-parsing",children:e.exports.jsx(s.a,{href:"#lab-5-parsing",children:"Lab 5: Parsing"})}),`
`,e.exports.jsx(s.p,{children:e.exports.jsx(s.a,{href:"https://classroom.github.com/a/svrcevyY",target:"_blank",rel:"noopener noreferrer",children:"Github Classroom assignment"})}),`
`,e.exports.jsx(s.div,{className:"task-no-number-callout callout",children:e.exports.jsxs(s.p,{children:["Please put your answers to written questions in this lab, if any, in a Markdown file named ",e.exports.jsx(s.code,{children:"README.md"})," in your lab repo."]})}),`
`,e.exports.jsx(s.h2,{id:"introduction",children:e.exports.jsx(s.a,{href:"#introduction",children:"Introduction"})}),`
`,e.exports.jsxs(s.p,{children:["Welcome to lab 5! In this lab, you will learn about the data structures used to represent 3D scenes. You will write code that turns an easy-to-build, tree-based representation of scenes (",e.exports.jsx(s.code,{children:"SceneData"}),") into a vector-based representation that's much easier to render an image with (",e.exports.jsx(s.code,{children:"RenderData"}),")."]}),`
`,e.exports.jsxs(s.p,{children:["Along the way, you will learn how ",e.exports.jsx(s.strong,{children:"lights"}),", ",e.exports.jsx(s.strong,{children:"cameras"}),", and ",e.exports.jsx(s.strong,{children:"primitives"})," are represented, as well as how to traverse ",e.exports.jsx(s.strong,{children:"transformation/scene graphs"})," so that everything in the scene has the right transform."]}),`
`,e.exports.jsx(s.div,{className:"warning-callout callout",children:e.exports.jsxs(s.p,{children:["You will use the code you write in this lab for your remaining four projects, in both ",e.exports.jsx(s.strong,{children:"Ray"})," and ",e.exports.jsx(s.strong,{children:"Realtime"}),"."]})}),`
`,e.exports.jsx(s.h3,{id:"objectives",children:e.exports.jsx(s.a,{href:"#objectives",children:"Objectives"})}),`
`,e.exports.jsxs(s.ol,{children:[`
`,e.exports.jsx(s.li,{children:"Learn about the data structures we'll use to represent 3D scenes, and"}),`
`,e.exports.jsxs(s.li,{children:["Implement a parser that transforms ",e.exports.jsx(s.code,{children:"SceneData"})," to ",e.exports.jsx(s.code,{children:"RenderData"}),"."]}),`
`]}),`
`,e.exports.jsx(s.h2,{id:"scene-data-vs-render-data",children:e.exports.jsx(s.a,{href:"#scene-data-vs-render-data",children:"Scene Data vs. Render Data"})}),`
`,e.exports.jsx(s.p,{children:"To visualize a compelling 3D scene, we need data about the stuff it contains: lights, cameras, and primitives (including textures, surfaces, and geometry). Depending on our intended use, there are more and less effective ways to store this data."}),`
`,e.exports.jsxs(s.p,{children:[e.exports.jsx(s.strong,{children:"When building a scene"}),", we use ",e.exports.jsx(s.em,{children:"transformation graphs"})," (also known as ",e.exports.jsx(s.em,{children:e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/Scene_graph",target:"_blank",rel:"noopener noreferrer",children:"scene graphs"})}),") to make it easy to keep track of and modify the sizes, orientations, and positions of our primitives. For our purposes, a transformation graph is a tree-like data structure which organizes scenes based on the logical (and often spatial) groupings of objects in a scene."]}),`
`,e.exports.jsx(s.div,{className:"success-callout callout",children:e.exports.jsxs(s.p,{children:['We can think of this as the "default" representation of a scene, so we will call it ',e.exports.jsx(s.code,{children:"SceneData"}),"."]})}),`
`,e.exports.jsxs(s.p,{children:[e.exports.jsx(s.strong,{children:"However, when rendering a scene"}),", we don't necessarily care about these groupings. Instead, what we'd really like is to be able to quickly obtain each primitive's final transform: thus, we store each primitive's ",e.exports.jsx(s.em,{children:"cumulative transformation matrix"})," (",e.exports.jsx(s.code,{children:"ctm"}),", for short) with the primitive itself, in a vector/list."]}),`
`,e.exports.jsx(s.div,{className:"success-callout callout",children:e.exports.jsxs(s.p,{children:['We can think of this as the "render-optimized" representation of a scene, so we will call it ',e.exports.jsx(s.code,{children:"RenderData"}),"."]})}),`
`,e.exports.jsxs(s.p,{children:["Take a look at the two figures below. In this lab, your task will be to write a parser which transforms ",e.exports.jsx(s.code,{children:"SceneData"})," to ",e.exports.jsx(s.code,{children:"RenderData"}),"."]}),`
`,e.exports.jsx(t,{images:[{src:"/labs/lab5/scene-vs-render-1.png",alt:"TODO"}],figNumber:1,children:e.exports.jsxs(s.p,{children:["Transforming ",e.exports.jsx(s.code,{children:"SceneData"})," into ",e.exports.jsx(s.code,{children:"RenderData"}),". Conceptually, they store the same information, just in a different format!"]})}),`
`,e.exports.jsx(t,{images:[{src:"/labs/lab5/scene-vs-render-2.png",alt:"TODO"}],figNumber:2,figCaption:"Comparing scene graphs and lists of primitives, as data structures."}),`
`,e.exports.jsxs(s.p,{children:["In ",e.exports.jsx(s.a,{href:"#figure-1",children:"Figure 1"}),", observe how the ",e.exports.jsx(s.code,{children:"SceneGraph"})," and ",e.exports.jsx(s.code,{children:"PrimitivesList"})," are the only things that differentiate ",e.exports.jsx(s.code,{children:"SceneData"})," from ",e.exports.jsx(s.code,{children:"RenderData"}),". ",e.exports.jsx(s.a,{href:"#figure-2",children:"Figure 2"})," shows how primitives and their transformations are stored differently in these data structures."]}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"Extra: why do we use a vector/list to render primitives?"}),e.exports.jsxs(s.p,{children:["If you have started ",e.exports.jsx(s.code,{children:"Project 3: Intersect"}),", you might have reasoned that one of the reasons ray tracing is so computationally expensive is because we need to check for ray-primitive intersections. This is ",e.exports.jsx(s.em,{children:"especially"})," true when there are many primitives in the scene to check against."]}),e.exports.jsxs(s.p,{children:["We use a ",e.exports.jsx(s.strong,{children:"vector/list"})," to iterate through all the primitives in the scene because it is simple to implement, and has traditionally been sufficient for the requirements of this course."]}),e.exports.jsxs(s.p,{children:["That said, there isn't any reason that this part of ",e.exports.jsx(s.code,{children:"RenderData"})," ",e.exports.jsx(s.em,{children:"has"}),' to be a vector/list. If you want to get fancy, there are more efficient alternatives which allow for much faster ray-primitive intersection tests (see: "accelerated" data structures like octrees, bounding-volume hierarchies (BVHs), and KD-trees, all covered in lectures).']})]}),`
`,e.exports.jsx(s.h2,{id:"scene-data",children:e.exports.jsx(s.a,{href:"#scene-data",children:"Scene Data"})}),`
`,e.exports.jsxs(s.p,{children:["Let's take a look at ",e.exports.jsx(s.code,{children:"src/parser/SceneData.h"}),". This file contains all the data structures you need to build a scene, and we will go over each of them below."]}),`
`,e.exports.jsx(s.h3,{id:"global-data",children:e.exports.jsx(s.a,{href:"#global-data",children:"Global Data"})}),`
`,e.exports.jsxs(s.p,{children:["First, let's find out what ",e.exports.jsx(s.code,{children:"SceneGlobalData"})," is all about:"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line line-number",line:"37",children:[e.exports.jsx(s.span,{className:"pl-c",children:"// Struct which contains the global color coefficients of a scene."}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"38",children:[e.exports.jsx(s.span,{className:"pl-c",children:"// These are multiplied with the object-specific materials in the lighting equation."}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"39",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"SceneGlobalData"}),`  {
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"40",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," ka; ",e.exports.jsx(s.span,{className:"pl-c",children:"// Ambient term"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"41",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," kd; ",e.exports.jsx(s.span,{className:"pl-c",children:"// Diffuse term"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"42",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," ks; ",e.exports.jsx(s.span,{className:"pl-c",children:"// Specular term"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"43",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," kt; ",e.exports.jsx(s.span,{className:"pl-c",children:"// Transparency; used for extra credit (refraction)"}),`
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"44",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:["This struct contains data pertaining to the whole scene. Specifically, it contains color ",e.exports.jsx(s.strong,{children:"coefficients"})," that will be applied to the shading of every object in the scene."]}),`
`,e.exports.jsx(s.p,{children:"If you don't know exactly what these coefficients represent yet, that's not a problem. For this lab, you just need to know that each scene will need this global data for rendering purposes."}),`
`,e.exports.jsx(s.h3,{id:"lights",children:e.exports.jsx(s.a,{href:"#lights",children:"Lights"})}),`
`,e.exports.jsxs(s.p,{children:["Next, let's check out ",e.exports.jsx(s.code,{children:"LightType"}),":"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line line-number",line:"8",children:[e.exports.jsx(s.span,{className:"pl-c",children:"// Enum of the types of virtual lights that might be in the scene"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"9",children:[e.exports.jsx(s.span,{className:"pl-k",children:"enum"})," ",e.exports.jsx(s.span,{className:"pl-k",children:"class"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"LightType"}),` {
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"10",children:`    LIGHT_POINT,
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"11",children:`    LIGHT_DIRECTIONAL,
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"12",children:`    LIGHT_SPOT
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"13",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:["To simulate different light sources in the real world, we will use three types of ",e.exports.jsx(s.strong,{children:"virtual lights"}),": point, directional, and spot lights (more on them later)."]}),`
`,e.exports.jsxs(s.p,{children:["Following that, here's ",e.exports.jsx(s.code,{children:"SceneLightData"}),":"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line line-number",line:"46",children:[e.exports.jsx(s.span,{className:"pl-c",children:"// Struct which contains data for a single light"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"47",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"SceneLightData"}),` {
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"48",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"int"}),` id;
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"49",children:`    LightType type;
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"50",children:`
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"51",children:`    SceneColor color;
`}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"52",children:["    glm::vec3 function;  ",e.exports.jsx(s.span,{className:"pl-c",children:"// Attenuation function"}),`
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"53",children:`
`}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"54",children:["    glm::vec4 pos;       ",e.exports.jsx(s.span,{className:"pl-c",children:"// Not applicable to directional lights"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"55",children:["    glm::vec4 dir;       ",e.exports.jsx(s.span,{className:"pl-c",children:"// Not applicable to point lights"}),`
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"56",children:`
`}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"57",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," penumbra;      ",e.exports.jsx(s.span,{className:"pl-c",children:"// Only applicable to spot lights, in RADIANS"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"58",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," angle;         ",e.exports.jsx(s.span,{className:"pl-c",children:"// Only applicable to spot lights, in RADIANS"}),`
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"59",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:["Each light in our scene is represented with a struct that includes its ",e.exports.jsx(s.code,{children:"LightType"}),", its color, and other relevant information depending on the ",e.exports.jsx(s.code,{children:"LightType"}),"."]}),`
`,e.exports.jsxs(s.ol,{children:[`
`,e.exports.jsxs(s.li,{children:["A ",e.exports.jsx(s.strong,{children:"point light"})," is a single point in space that emits light equally in all directions (e.g. an infinitesimally small lightbulb). It is defined by its color and position."]}),`
`,e.exports.jsxs(s.li,{children:["A ",e.exports.jsx(s.strong,{children:"directional light"})," is a global light which simulates light from a source that is infinitely far away (e.g. the sun, as we experience it on earth). It is defined by its color and direction."]}),`
`,e.exports.jsxs(s.li,{children:["A ",e.exports.jsx(s.strong,{children:"spot light"})," is much more interesting\u2014it is effectively a point light, but it emits light only in a cone shape (e.g. a flashlight). It is defined by its color, position, and direction, as well as a penumbra and angle, which describe its cone. More information can be found in ",e.exports.jsx("a",{href:"https://cs1230.graphics/projects/ray/2/#spot-lights",children:"Project 4 Illuminate"})]}),`
`]}),`
`,e.exports.jsxs(s.p,{children:["Documentation about virtual lights commonly used in 3D scenes can be readily found online, such as in the ",e.exports.jsx(s.a,{href:"https://docs.unity3d.com/Manual/Lighting.html",target:"_blank",rel:"noopener noreferrer",children:"Unity3D manual"}),"."]}),`
`,e.exports.jsx(s.h3,{id:"camera-data",children:e.exports.jsx(s.a,{href:"#camera-data",children:"Camera Data"})}),`
`,e.exports.jsxs(s.p,{children:["For the camera, we'll inspect ",e.exports.jsx(s.code,{children:"SceneCameraData"}),"."]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line line-number",line:"63",children:[e.exports.jsx(s.span,{className:"pl-c",children:"// Struct which contains data for the camera of a scene"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"64",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"SceneCameraData"}),` {
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"65",children:`    glm::vec4 pos;
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"66",children:`    glm::vec4 look;
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"67",children:`    glm::vec4 up;
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"68",children:`
`}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"69",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," heightAngle;   ",e.exports.jsx(s.span,{className:"pl-c",children:"// The height angle of the camera in RADIANS"}),`
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"70",children:`
`}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"71",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," aperture;      ",e.exports.jsx(s.span,{className:"pl-c",children:"// Only applicable for depth of field"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"72",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," focalLength;   ",e.exports.jsx(s.span,{className:"pl-c",children:"// Only applicable for depth of field"}),`
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"73",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:["As with our lights, our virtual camera is just a struct with the fields necessary to describe its properties. One important thing to note is that ",e.exports.jsx(s.code,{children:"pos"}),", ",e.exports.jsx(s.code,{children:"look"}),", and ",e.exports.jsx(s.code,{children:"up"})," are all defined in world space. They'd be pretty useless if they were defined in camera space."]}),`
`,e.exports.jsx(s.h3,{id:"primitives",children:e.exports.jsx(s.a,{href:"#primitives",children:"Primitives"})}),`
`,e.exports.jsxs(s.p,{children:["Next up, ",e.exports.jsx(s.code,{children:"PrimitiveType"}),":"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line line-number",line:"16",children:[e.exports.jsx(s.span,{className:"pl-c",children:"// Enum of the types of primitives that might be in the scene"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"17",children:[e.exports.jsx(s.span,{className:"pl-k",children:"enum"})," ",e.exports.jsx(s.span,{className:"pl-k",children:"class"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"PrimitiveType"}),` {
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"18",children:`    PRIMITIVE_CUBE,
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"19",children:`    PRIMITIVE_CONE,
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"20",children:`    PRIMITIVE_CYLINDER,
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"21",children:`    PRIMITIVE_TORUS,
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"22",children:`    PRIMITIVE_SPHERE,
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"23",children:`    PRIMITIVE_MESH
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"24",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:["Much like with ",e.exports.jsx(s.code,{children:"LightType"}),", we use ",e.exports.jsx(s.code,{children:"PrimitiveType"})," to identify different types of primitives. This is used in a struct, ",e.exports.jsx(s.code,{children:"ScenePrimitive"}),", to describe a specific primitive in the scene:"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line line-number",line:"130",children:[e.exports.jsx(s.span,{className:"pl-c",children:"// Struct which contains data for a single primitive in a scene"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"131",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"ScenePrimitive"}),` {
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"132",children:`   PrimitiveType type;
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"133",children:`   SceneMaterial material;
`}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"134",children:["   std::string   meshfile; ",e.exports.jsx(s.span,{className:"pl-c",children:"// Used for triangle meshes"}),`
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"135",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:["Every primitive has both a ",e.exports.jsx(s.code,{children:"type"})," and ",e.exports.jsx(s.code,{children:"material"}),". The ",e.exports.jsx(s.code,{children:"meshfile"})," field will only be relevant if you'd like to implement triangle mesh rendering, an extra credit option for our ",e.exports.jsx(s.strong,{children:"Ray"})," and ",e.exports.jsx(s.strong,{children:"Realtime"})," projects."]}),`
`,e.exports.jsxs(s.p,{children:[e.exports.jsx(s.code,{children:"material"})," contains important information about what the primitive looks like (e.g. its color, how shiny it is, any textures, etc.). You can look at the definition of ",e.exports.jsx(s.code,{children:"SceneMaterial"})," for details, but it's fine not to understand any of the terms which haven't yet been covered in lecture."]}),`
`,e.exports.jsxs(s.p,{children:["Observe that, unlike the light or camera structs, there aren't any fields in ",e.exports.jsx(s.code,{children:"ScenePrimitive"})," that describe its transformation. This is because it's more practical to use ",e.exports.jsx(s.strong,{children:"scene graphs"})," to manage this, especially when we have a lot of primitives!"]}),`
`,e.exports.jsx(s.h2,{id:"scene-graphs",children:e.exports.jsx(s.a,{href:"#scene-graphs",children:"Scene Graphs"})}),`
`,e.exports.jsxs(s.blockquote,{children:[`
`,e.exports.jsx(s.p,{children:"Note that we use the terms transformation graph and scene graph loosely interchangeably."}),`
`]}),`
`,e.exports.jsx(s.p,{children:"Scene graphs store a tree-based, hierarchical representation of a scene, and express the spatial relationships between groups of objects. In this section, we'll look at how we can describe individual transformations, and then an entire scene graph."}),`
`,e.exports.jsx(s.h3,{id:"transformations",children:e.exports.jsx(s.a,{href:"#transformations",children:"Transformations"})}),`
`,e.exports.jsx(s.p,{children:"In lab 4, you learned to compose a series of translation, rotation, and scaling matrices into a single transformation matrix. This means that all permutations of those basic transforms can be written as a single matrix. However, when placing objects in a scene, it is much easier to just work with those basic transforms directly. So, that leaves us with four types of transformations:"}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line line-number",line:"26",children:[e.exports.jsx(s.span,{className:"pl-c",children:"// Enum of the types of transformations that can be applied"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"27",children:[e.exports.jsx(s.span,{className:"pl-k",children:"enum"})," ",e.exports.jsx(s.span,{className:"pl-k",children:"class"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"TransformationType"}),` {
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"28",children:`    TRANSFORMATION_TRANSLATE,
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"29",children:`    TRANSFORMATION_SCALE,
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"30",children:`    TRANSFORMATION_ROTATE,
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"31",children:`    TRANSFORMATION_MATRIX
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"32",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:["This type is then stored in a struct that contains the a transformation's specific information, ",e.exports.jsx(s.code,{children:"SceneTransformation"}),":"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line line-number",line:"137",children:[e.exports.jsx(s.span,{className:"pl-c",children:"// Struct which contains data for a transformation."}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"138",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"SceneTransformation"}),` {
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"139",children:`    TransformationType type;
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"140",children:`
`}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"141",children:["    glm::vec3 translate; ",e.exports.jsx(s.span,{className:"pl-c",children:"// Only applicable when translating. Defines t_x, t_y, and t_z, the amounts to translate by, along each axis."}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"142",children:["    glm::vec3 scale;     ",e.exports.jsx(s.span,{className:"pl-c",children:"// Only applicable when scaling.     Defines s_x, s_y, and s_z, the amounts to scale by, along each axis."}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"143",children:["    glm::vec3 rotate;    ",e.exports.jsx(s.span,{className:"pl-c",children:"// Only applicable when rotating.    Defines the axis of rotation; should be a unit vector."}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"144",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," angle;         ",e.exports.jsx(s.span,{className:"pl-c",children:"// Only applicable when rotating.    Defines the angle to rotate by in RADIANS, following the right-hand rule."}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"145",children:["    glm::mat4 matrix;    ",e.exports.jsx(s.span,{className:"pl-c",children:"// Only applicable when transforming by a custom matrix. This is that custom matrix."}),`
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"146",children:`};
`})]})}),`
`,e.exports.jsxs(s.div,{className:"success-callout callout",children:[e.exports.jsxs(s.p,{children:["Instead of copying your code from Lab 4, you may find the following methods from the ",e.exports.jsx(s.a,{href:"https://glm.g-truc.net/0.9.9/api/a00362.html",target:"_blank",rel:"noopener noreferrer",children:"GLM library"})," very helpful for constructing transformation matrices."]}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsx(s.li,{children:e.exports.jsx(s.code,{children:"glm::translate()"})}),`
`,e.exports.jsx(s.li,{children:e.exports.jsx(s.code,{children:"glm::scale()"})}),`
`,e.exports.jsx(s.li,{children:e.exports.jsx(s.code,{children:"glm::rotate()"})}),`
`]})]}),`
`,e.exports.jsx(s.h3,{id:"scene-graph-nodes",children:e.exports.jsx(s.a,{href:"#scene-graph-nodes",children:"Scene Graph Nodes"})}),`
`,e.exports.jsx(s.p,{children:"Our scene graph is composed of nodes, each of which describes zero or more of the following:"}),`
`,e.exports.jsxs(s.ol,{children:[`
`,e.exports.jsx(s.li,{children:"a series of transformations,"}),`
`,e.exports.jsx(s.li,{children:"a number of primitives, and"}),`
`,e.exports.jsx(s.li,{children:"a number of children nodes."}),`
`]}),`
`,e.exports.jsxs(s.p,{children:["Take a look at the node struct, ",e.exports.jsx(s.code,{children:"SceneNode"}),", that we've defined:"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line line-number",line:"148",children:[e.exports.jsx(s.span,{className:"pl-c",children:"// Struct which represents a node in the scene graph/tree, to be parsed by the student's `SceneParser`."}),`
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"149",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"SceneNode"}),` {
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"150",children:["   std::vector<SceneTransformation*> transformations; ",e.exports.jsx(s.span,{className:"pl-c",children:"// Note the order of transformations described in lab 5"}),`
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"151",children:`   std::vector<ScenePrimitive*>      primitives;
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"152",children:`   std::vector<SceneNode*>           children;
`}),e.exports.jsx(s.span,{className:"code-line line-number",line:"153",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:["If a ",e.exports.jsx(s.code,{children:"SceneNode"})," has ",e.exports.jsx(s.code,{children:"transformations"}),", those apply to both its ",e.exports.jsx(s.code,{children:"primitives"})," and ",e.exports.jsx(s.code,{children:"children"}),"."]}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"Example: how might a city scene be grouped?"}),e.exports.jsx(s.p,{children:"If our scene describes a cityscape, it would be silly to describe every window's position by its distance from the center of the city. It would make much more sense to instead describe each window's position relative to the building it is a part of. Using the same logic, we might describe the building's position relative to its street, then the street's position relative to the city."}),e.exports.jsxs(s.p,{children:['This way, "relocating" a building would only involve applying a single transform to the parent ',e.exports.jsx(s.code,{children:"SceneNode"})," which represents it. Then, every descendant of that ",e.exports.jsx(s.code,{children:"SceneNode"})," would have that transformation applied, too."]})]}),`
`,e.exports.jsx(s.h3,{id:"cumulative-transformation-matrices",children:e.exports.jsx(s.a,{href:"#cumulative-transformation-matrices",children:"Cumulative Transformation Matrices"})}),`
`,e.exports.jsxs(s.p,{children:["Now that we have our ",e.exports.jsx(s.code,{children:"SceneTransformation"}),"s and ",e.exports.jsx(s.code,{children:"SceneNode"}),"s, we can begin to learn to derive ",e.exports.jsx(s.strong,{children:"cumulative transformation matrices"})," for each primitive."]}),`
`,e.exports.jsxs(s.p,{children:["A cumulative transformation matrix (CTM) is the composition of ",e.exports.jsx(s.em,{children:"all"})," the transformations done to a single primitive, from the root ",e.exports.jsx(s.code,{children:"SceneNode"}),", down to the one which contains the primitive itself. This is best demonstrated with an example. Consider the scene graph below, which contains five primitives:"]}),`
`,e.exports.jsx(t,{images:[{src:"/labs/lab5/example-scenegraph.png",alt:"Scene graph with five primitives"}],figNumber:3,targetWidth:"75%",figCaption:"Scene graph with five primitives."}),`
`,e.exports.jsxs(s.div,{className:"warning-callout callout",children:[e.exports.jsxs(s.p,{children:["As usual, all nodes in this tree are ",e.exports.jsx(s.code,{children:"SceneNode"}),"s."]}),e.exports.jsxs(s.p,{children:[e.exports.jsx(s.strong,{children:"In this specific example"}),", the ",e.exports.jsx(s.em,{children:"leaf nodes"})," contain only one ",e.exports.jsx(s.code,{children:"primitive"})," each (no transformations or children). Meanwhile, the ",e.exports.jsx(s.em,{children:"non-leaf nodes"})," contain only lists of ",e.exports.jsx(s.code,{children:"transformations"})," (e.g. ",e.exports.jsx(s.code,{children:"{T1}"})," and ",e.exports.jsx(s.code,{children:"{R1, S1}"}),"), plus a list of their ",e.exports.jsx(s.code,{children:"children"})," (easily determined by just looking at the tree)."]}),e.exports.jsx(s.div,{className:"error-callout callout",children:e.exports.jsx(s.p,{children:e.exports.jsxs(s.strong,{children:["Be aware that these properties are not true of ",e.exports.jsx(s.em,{children:"all"})," scene graphs!"]})})})]}),`
`,e.exports.jsx(s.p,{children:"Note that even though we've stored the primitives in their own, individual nodes here, there's no reason we can't just put the primitives in their parent nodes, alongside the transformations!"}),`
`,e.exports.jsx(s.p,{children:"We use this tree in the same way we used transformation graphs in lab 4, following three basic rules:"}),`
`,e.exports.jsx(s.div,{className:"success-callout callout",children:e.exports.jsxs(s.ol,{children:[`
`,e.exports.jsxs(s.li,{children:["Transformations on non-leaf nodes are applied to their ",e.exports.jsx(s.em,{children:"all"})," of their descendants."]}),`
`,e.exports.jsxs(s.li,{children:["If a node contains multiple transformations ",e.exports.jsx(s.code,{children:"{R1, S1}"}),", described by matrices ",e.exports.jsx(s.span,{className:"math math-inline",children:e.exports.jsx(s["mjx-container"],{className:"MathJax",jax:"SVG",children:e.exports.jsxs(s.svg,{style:{verticalAlign:"-0.373ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.396ex",height:"1.918ex",role:"img",focusable:"false",viewBox:"0 -683 1943.2 847.8",xmlnsXlink:"http://www.w3.org/1999/xlink",children:[e.exports.jsxs(s.defs,{children:[e.exports.jsx(s.path,{id:"MJX-1-TEX-I-1D440",d:"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"}),e.exports.jsx(s.path,{id:"MJX-1-TEX-I-1D445",d:"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"}),e.exports.jsx(s.path,{id:"MJX-1-TEX-N-31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"})]}),e.exports.jsx(s.g,{stroke:"currentColor",fill:"currentColor",strokeWidth:"0",transform:"scale(1,-1)",children:e.exports.jsx(s.g,{"data-mml-node":"math",children:e.exports.jsxs(s.g,{"data-mml-node":"msub",children:[e.exports.jsx(s.g,{"data-mml-node":"mi",children:e.exports.jsx(s.use,{"data-c":"1D440",xlinkHref:"#MJX-1-TEX-I-1D440"})}),e.exports.jsxs(s.g,{"data-mml-node":"TeXAtom",transform:"translate(1003,-150) scale(0.707)","data-mjx-texclass":"ORD",children:[e.exports.jsx(s.g,{"data-mml-node":"mi",children:e.exports.jsx(s.use,{"data-c":"1D445",xlinkHref:"#MJX-1-TEX-I-1D445"})}),e.exports.jsx(s.g,{"data-mml-node":"mn",transform:"translate(759,0)",children:e.exports.jsx(s.use,{"data-c":"31",xlinkHref:"#MJX-1-TEX-N-31"})})]})]})})})]})})})," and ",e.exports.jsx(s.span,{className:"math math-inline",children:e.exports.jsx(s["mjx-container"],{className:"MathJax",jax:"SVG",children:e.exports.jsxs(s.svg,{style:{verticalAlign:"-0.375ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.214ex",height:"1.92ex",role:"img",focusable:"false",viewBox:"0 -683 1862.6 848.6",xmlnsXlink:"http://www.w3.org/1999/xlink",children:[e.exports.jsxs(s.defs,{children:[e.exports.jsx(s.path,{id:"MJX-2-TEX-I-1D440",d:"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"}),e.exports.jsx(s.path,{id:"MJX-2-TEX-I-1D446",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}),e.exports.jsx(s.path,{id:"MJX-2-TEX-N-31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"})]}),e.exports.jsx(s.g,{stroke:"currentColor",fill:"currentColor",strokeWidth:"0",transform:"scale(1,-1)",children:e.exports.jsx(s.g,{"data-mml-node":"math",children:e.exports.jsxs(s.g,{"data-mml-node":"msub",children:[e.exports.jsx(s.g,{"data-mml-node":"mi",children:e.exports.jsx(s.use,{"data-c":"1D440",xlinkHref:"#MJX-2-TEX-I-1D440"})}),e.exports.jsxs(s.g,{"data-mml-node":"TeXAtom",transform:"translate(1003,-150) scale(0.707)","data-mjx-texclass":"ORD",children:[e.exports.jsx(s.g,{"data-mml-node":"mi",children:e.exports.jsx(s.use,{"data-c":"1D446",xlinkHref:"#MJX-2-TEX-I-1D446"})}),e.exports.jsx(s.g,{"data-mml-node":"mn",transform:"translate(645,0)",children:e.exports.jsx(s.use,{"data-c":"31",xlinkHref:"#MJX-2-TEX-N-31"})})]})]})})})]})})})," respectively, then its total transformation is ",e.exports.jsx(s.span,{className:"math math-inline",children:e.exports.jsx(s["mjx-container"],{className:"MathJax",jax:"SVG",children:e.exports.jsxs(s.svg,{style:{verticalAlign:"-0.375ex"},xmlns:"http://www.w3.org/2000/svg",width:"17.12ex",height:"1.92ex",role:"img",focusable:"false",viewBox:"0 -683 7567.1 848.6",xmlnsXlink:"http://www.w3.org/1999/xlink",children:[e.exports.jsxs(s.defs,{children:[e.exports.jsx(s.path,{id:"MJX-3-TEX-I-1D440",d:"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-74",d:"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-6F",d:"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-61",d:"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-6C",d:"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-52",d:"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-53",d:"M55 507Q55 590 112 647T243 704H257Q342 704 405 641L426 672Q431 679 436 687T446 700L449 704Q450 704 453 704T459 705H463Q466 705 472 699V462L466 456H448Q437 456 435 459T430 479Q413 605 329 646Q292 662 254 662Q201 662 168 626T135 542Q135 508 152 480T200 435Q210 431 286 412T370 389Q427 367 463 314T500 191Q500 110 448 45T301 -21Q245 -21 201 -4T140 27L122 41Q118 36 107 21T87 -7T78 -21Q76 -22 68 -22H64Q61 -22 55 -16V101Q55 220 56 222Q58 227 76 227H89Q95 221 95 214Q95 182 105 151T139 90T205 42T305 24Q352 24 386 62T420 155Q420 198 398 233T340 281Q284 295 266 300Q261 301 239 306T206 314T174 325T141 343T112 367T85 402Q55 451 55 507Z"})]}),e.exports.jsx(s.g,{stroke:"currentColor",fill:"currentColor",strokeWidth:"0",transform:"scale(1,-1)",children:e.exports.jsxs(s.g,{"data-mml-node":"math",children:[e.exports.jsxs(s.g,{"data-mml-node":"msub",children:[e.exports.jsx(s.g,{"data-mml-node":"mi",children:e.exports.jsx(s.use,{"data-c":"1D440",xlinkHref:"#MJX-3-TEX-I-1D440"})}),e.exports.jsxs(s.g,{"data-mml-node":"mtext",transform:"translate(1003,-150) scale(0.707)",children:[e.exports.jsx(s.use,{"data-c":"74",xlinkHref:"#MJX-3-TEX-N-74"}),e.exports.jsx(s.use,{"data-c":"6F",xlinkHref:"#MJX-3-TEX-N-6F",transform:"translate(389,0)"}),e.exports.jsx(s.use,{"data-c":"74",xlinkHref:"#MJX-3-TEX-N-74",transform:"translate(889,0)"}),e.exports.jsx(s.use,{"data-c":"61",xlinkHref:"#MJX-3-TEX-N-61",transform:"translate(1278,0)"}),e.exports.jsx(s.use,{"data-c":"6C",xlinkHref:"#MJX-3-TEX-N-6C",transform:"translate(1778,0)"})]})]}),e.exports.jsx(s.g,{"data-mml-node":"mo",transform:"translate(2784.6,0)",children:e.exports.jsx(s.use,{"data-c":"3D",xlinkHref:"#MJX-3-TEX-N-3D"})}),e.exports.jsxs(s.g,{"data-mml-node":"msub",transform:"translate(3840.4,0)",children:[e.exports.jsx(s.g,{"data-mml-node":"mi",children:e.exports.jsx(s.use,{"data-c":"1D440",xlinkHref:"#MJX-3-TEX-I-1D440"})}),e.exports.jsxs(s.g,{"data-mml-node":"mtext",transform:"translate(1003,-150) scale(0.707)",children:[e.exports.jsx(s.use,{"data-c":"52",xlinkHref:"#MJX-3-TEX-N-52"}),e.exports.jsx(s.use,{"data-c":"31",xlinkHref:"#MJX-3-TEX-N-31",transform:"translate(736,0)"})]})]}),e.exports.jsxs(s.g,{"data-mml-node":"msub",transform:"translate(5767.4,0)",children:[e.exports.jsx(s.g,{"data-mml-node":"mi",children:e.exports.jsx(s.use,{"data-c":"1D440",xlinkHref:"#MJX-3-TEX-I-1D440"})}),e.exports.jsxs(s.g,{"data-mml-node":"mtext",transform:"translate(1003,-150) scale(0.707)",children:[e.exports.jsx(s.use,{"data-c":"53",xlinkHref:"#MJX-3-TEX-N-53"}),e.exports.jsx(s.use,{"data-c":"31",xlinkHref:"#MJX-3-TEX-N-31",transform:"translate(556,0)"})]})]})]})})]})})}),"."]}),`
`,e.exports.jsxs(s.li,{children:["Each node's transformations are applied before its parent's transformations, i.e. ",e.exports.jsx(s.span,{className:"math math-inline",children:e.exports.jsx(s["mjx-container"],{className:"MathJax",jax:"SVG",children:e.exports.jsxs(s.svg,{style:{verticalAlign:"-0.65ex"},xmlns:"http://www.w3.org/2000/svg",width:"21.371ex",height:"2.195ex",role:"img",focusable:"false",viewBox:"0 -683 9445.8 970.2",xmlnsXlink:"http://www.w3.org/1999/xlink",children:[e.exports.jsxs(s.defs,{children:[e.exports.jsx(s.path,{id:"MJX-4-TEX-I-1D440",d:"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"}),e.exports.jsx(s.path,{id:"MJX-4-TEX-N-74",d:"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"}),e.exports.jsx(s.path,{id:"MJX-4-TEX-N-6F",d:"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"}),e.exports.jsx(s.path,{id:"MJX-4-TEX-N-61",d:"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"}),e.exports.jsx(s.path,{id:"MJX-4-TEX-N-6C",d:"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"}),e.exports.jsx(s.path,{id:"MJX-4-TEX-N-3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}),e.exports.jsx(s.path,{id:"MJX-4-TEX-N-70",d:"M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z"}),e.exports.jsx(s.path,{id:"MJX-4-TEX-N-72",d:"M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"}),e.exports.jsx(s.path,{id:"MJX-4-TEX-N-65",d:"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"}),e.exports.jsx(s.path,{id:"MJX-4-TEX-N-6E",d:"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"}),e.exports.jsx(s.path,{id:"MJX-4-TEX-N-63",d:"M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"}),e.exports.jsx(s.path,{id:"MJX-4-TEX-N-68",d:"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"}),e.exports.jsx(s.path,{id:"MJX-4-TEX-N-69",d:"M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"}),e.exports.jsx(s.path,{id:"MJX-4-TEX-N-64",d:"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"})]}),e.exports.jsx(s.g,{stroke:"currentColor",fill:"currentColor",strokeWidth:"0",transform:"scale(1,-1)",children:e.exports.jsxs(s.g,{"data-mml-node":"math",children:[e.exports.jsxs(s.g,{"data-mml-node":"msub",children:[e.exports.jsx(s.g,{"data-mml-node":"mi",children:e.exports.jsx(s.use,{"data-c":"1D440",xlinkHref:"#MJX-4-TEX-I-1D440"})}),e.exports.jsxs(s.g,{"data-mml-node":"mtext",transform:"translate(1003,-150) scale(0.707)",children:[e.exports.jsx(s.use,{"data-c":"74",xlinkHref:"#MJX-4-TEX-N-74"}),e.exports.jsx(s.use,{"data-c":"6F",xlinkHref:"#MJX-4-TEX-N-6F",transform:"translate(389,0)"}),e.exports.jsx(s.use,{"data-c":"74",xlinkHref:"#MJX-4-TEX-N-74",transform:"translate(889,0)"}),e.exports.jsx(s.use,{"data-c":"61",xlinkHref:"#MJX-4-TEX-N-61",transform:"translate(1278,0)"}),e.exports.jsx(s.use,{"data-c":"6C",xlinkHref:"#MJX-4-TEX-N-6C",transform:"translate(1778,0)"})]})]}),e.exports.jsx(s.g,{"data-mml-node":"mo",transform:"translate(2784.6,0)",children:e.exports.jsx(s.use,{"data-c":"3D",xlinkHref:"#MJX-4-TEX-N-3D"})}),e.exports.jsxs(s.g,{"data-mml-node":"msub",transform:"translate(3840.4,0)",children:[e.exports.jsx(s.g,{"data-mml-node":"mi",children:e.exports.jsx(s.use,{"data-c":"1D440",xlinkHref:"#MJX-4-TEX-I-1D440"})}),e.exports.jsxs(s.g,{"data-mml-node":"mtext",transform:"translate(1003,-150) scale(0.707)",children:[e.exports.jsx(s.use,{"data-c":"70",xlinkHref:"#MJX-4-TEX-N-70"}),e.exports.jsx(s.use,{"data-c":"61",xlinkHref:"#MJX-4-TEX-N-61",transform:"translate(556,0)"}),e.exports.jsx(s.use,{"data-c":"72",xlinkHref:"#MJX-4-TEX-N-72",transform:"translate(1056,0)"}),e.exports.jsx(s.use,{"data-c":"65",xlinkHref:"#MJX-4-TEX-N-65",transform:"translate(1448,0)"}),e.exports.jsx(s.use,{"data-c":"6E",xlinkHref:"#MJX-4-TEX-N-6E",transform:"translate(1892,0)"}),e.exports.jsx(s.use,{"data-c":"74",xlinkHref:"#MJX-4-TEX-N-74",transform:"translate(2448,0)"})]})]}),e.exports.jsxs(s.g,{"data-mml-node":"msub",transform:"translate(6899.4,0)",children:[e.exports.jsx(s.g,{"data-mml-node":"mi",children:e.exports.jsx(s.use,{"data-c":"1D440",xlinkHref:"#MJX-4-TEX-I-1D440"})}),e.exports.jsxs(s.g,{"data-mml-node":"mtext",transform:"translate(1003,-150) scale(0.707)",children:[e.exports.jsx(s.use,{"data-c":"63",xlinkHref:"#MJX-4-TEX-N-63"}),e.exports.jsx(s.use,{"data-c":"68",xlinkHref:"#MJX-4-TEX-N-68",transform:"translate(444,0)"}),e.exports.jsx(s.use,{"data-c":"69",xlinkHref:"#MJX-4-TEX-N-69",transform:"translate(1000,0)"}),e.exports.jsx(s.use,{"data-c":"6C",xlinkHref:"#MJX-4-TEX-N-6C",transform:"translate(1278,0)"}),e.exports.jsx(s.use,{"data-c":"64",xlinkHref:"#MJX-4-TEX-N-64",transform:"translate(1556,0)"})]})]})]})})]})})}),"."]}),`
`]})}),`
`,e.exports.jsx(s.p,{children:"And here, finally, is your first task for this lab!"}),`
`,e.exports.jsxs(s.div,{className:"task-callout callout",children:[e.exports.jsxs(s.p,{children:["For the scene graph in ",e.exports.jsx(s.a,{href:"#figure-3",children:"Figure 3"}),", express the CTMs for the cube, cone and cylinder in terms of the matrices found in the graph (e.g. ",e.exports.jsx(s.code,{children:"T1"}),", ",e.exports.jsx(s.code,{children:"R2"}),", etc.)."]}),e.exports.jsx(s.p,{children:"Keep the rules above in mind, especially the ones about ordering!"})]}),`
`,e.exports.jsx(s.h3,{id:"build-as-you-go",children:e.exports.jsx(s.a,{href:"#build-as-you-go",children:"Build-As-You-Go"})}),`
`,e.exports.jsxs(s.p,{children:["One na\xEFve way to obtain CTMs would be to descend the scene graph ",e.exports.jsx(s.em,{children:"from the root node"})," each time we'd like to compute a primitive's cumulative transformation matrix. In fact, this might've been what you did in the previous task. However, this is less than ideal:"]}),`
`,e.exports.jsx(s.div,{className:"task-callout callout",children:e.exports.jsxs(s.p,{children:["Describe a scenario in which doing the above would be ",e.exports.jsx(s.em,{children:"especially"})," ",e.exports.jsx(s.strong,{children:"inefficient"}),"."]})}),`
`,e.exports.jsx(s.p,{children:"A more efficient way to obtain each primitive's CTM would be to build a cumulative transform as we descend the tree."}),`
`,e.exports.jsx(s.div,{className:"task-callout callout",children:e.exports.jsx(s.p,{children:"Describe the steps you might take to build a cumulative transform as you descend the tree. What this might look like in code?"})}),`
`,e.exports.jsx(s.h3,{id:"practice-tree-traversal",children:e.exports.jsx(s.a,{href:"#practice-tree-traversal",children:"Practice Tree Traversal"})}),`
`,e.exports.jsx(s.p,{children:"Before we get further into the lab, let's first get you warmed up with traversing trees in a depth-first manner!"}),`
`,e.exports.jsx(s.p,{children:`In this practice problem, you will be debugging a DFS implementation that descends a binary tree of words to build and print out sentences. A diagram
of this tree can be seen below along with its expected outputs.`}),`
`,e.exports.jsx(t,{images:[{src:"/labs/lab5/debug-dfs-tree.png",alt:"binary tree of words"}],figNumber:4,targetWidth:"75%",figCaption:"Binary tree of words with their resulting sentences."}),`
`,e.exports.jsxs(s.p,{children:["The implementation of this can be found in ",e.exports.jsx(s.code,{children:"src/parser/sceneparser.cpp"}),". Each word in the above tree is represented by a ",e.exports.jsx(s.code,{children:"Word"})," struct. Take a look at this ",e.exports.jsx(s.code,{children:"Word"})," struct below:"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"Word"}),` {
`]}),e.exports.jsx(s.span,{className:"code-line",children:`    std::string word;
`}),e.exports.jsx(s.span,{className:"code-line",children:`    Word* left;
`}),e.exports.jsx(s.span,{className:"code-line",children:`    Word* right;
`}),e.exports.jsx(s.span,{className:"code-line",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:["Note that it contains a ",e.exports.jsx(s.code,{children:"std::string word"})," field that contains the actual word, as well as pointers to its left and right children."]}),`
`,e.exports.jsxs(s.p,{children:["We take care of initializing this tree of ",e.exports.jsx(s.code,{children:"Word"})," structs in ",e.exports.jsx(s.code,{children:"dfsInitTree()"}),". We have also implemented the function ",e.exports.jsx(s.code,{children:"dfsPrintTree()"}),` that performs the actual
DFS algorithm that descends the tree to build and print the sentences in your terminal.`]}),`
`,e.exports.jsxs(s.p,{children:["However, there's one problem\u2014 our ",e.exports.jsx(s.code,{children:"dfsPrintTree()"})," function is causing our program to crash and we need your help fixing it!"]}),`
`,e.exports.jsxs(s.div,{className:"task-callout callout",children:[e.exports.jsxs(s.p,{children:["In ",e.exports.jsx(s.code,{children:"parser/sceneparser.cpp"}),", uncomment the function ",e.exports.jsx(s.code,{children:"Sceneparser::debugDFS()"}),"."]}),e.exports.jsxs(s.p,{children:["Then, run the lab, and notice that ",e.exports.jsxs(s.strong,{children:["our ",e.exports.jsx(s.code,{children:"dfsPrintTree()"})," function is causing our program to crash!"]}),` Use the debugger tool to find out what is causing the crash.
Fix `,e.exports.jsx(s.code,{children:"dfsPrintTree()"})," such that when you run the program successfully, your terminal should print out the following sentences:"]}),e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsx(s.span,{className:"code-line",children:`I love CS123
`}),e.exports.jsx(s.span,{className:"code-line",children:`I love making 2D graphics
`}),e.exports.jsx(s.span,{className:"code-line",children:`I love making 3D graphics
`}),e.exports.jsx(s.span,{className:"code-line",children:`I hate bugs
`})]})}),e.exports.jsxs(s.p,{children:["Be prepared to explain to the TA during checkoff ",e.exports.jsx(s.strong,{children:"what"})," the bug was and ",e.exports.jsx(s.strong,{children:"how"})," you fixed it!"]}),e.exports.jsxs(s.p,{children:[e.exports.jsx(s.strong,{children:"Note"}),": You can ignore the window that pops up when you run the program. It will be used in the later tasks."]}),e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"Hint:"}),e.exports.jsx(s.p,{children:"Try running the code with the debugger! Also, you may need to add some logic to the code."})]})]}),`
`,e.exports.jsx(s.h2,{id:"render-data",children:e.exports.jsx(s.a,{href:"#render-data",children:"Render Data"})}),`
`,e.exports.jsxs(s.p,{children:["That was a lot of stuff to digest about scene graphs and ",e.exports.jsx(s.code,{children:"SceneData"}),"! Please pretend this is a break in the middle of the lab, and feel free to imagine some charming waiting room music."]}),`
`,e.exports.jsxs(s.p,{children:["When you're ready, let's get cracking on turning our ",e.exports.jsx(s.code,{children:"SceneData"})," into ",e.exports.jsx(s.code,{children:"RenderData"}),"."]}),`
`,e.exports.jsx(s.h3,{id:"implementing-sceneparserparse",children:e.exports.jsxs(s.a,{href:"#implementing-sceneparserparse",children:["Implementing ",e.exports.jsx(s.code,{children:"SceneParser::parse()"})]})}),`
`,e.exports.jsxs(s.p,{children:["Whenever we would like to load a scene, we call ",e.exports.jsx(s.code,{children:"SceneParser::parse()"}),". This can be found in ",e.exports.jsx(s.code,{children:"src/parser/sceneparser.cpp"}),":"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-k",children:"bool"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"SceneParser::parse"}),`(std::string filepath, RenderData &renderData) {
`]}),e.exports.jsxs(s.span,{className:"code-line highlight-line",children:["    ScenefileReader fileReader = ",e.exports.jsx(s.span,{className:"pl-c1",children:"ScenefileReader"}),`(filepath);
`]}),e.exports.jsxs(s.span,{className:"code-line highlight-line",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"bool"})," success = fileReader.",e.exports.jsx(s.span,{className:"pl-c1",children:"readJSON"}),`();
`]}),e.exports.jsxs(s.span,{className:"code-line highlight-line",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"if"}),` (!success) {
`]}),e.exports.jsxs(s.span,{className:"code-line highlight-line",children:["        ",e.exports.jsx(s.span,{className:"pl-k",children:"return"})," ",e.exports.jsx(s.span,{className:"pl-c1",children:"false"}),`;
`]}),e.exports.jsx(s.span,{className:"code-line highlight-line",children:`    }
`}),e.exports.jsx(s.span,{className:"code-line",children:`
`}),e.exports.jsxs(s.span,{className:"code-line",children:["    ",e.exports.jsx(s.span,{className:"pl-c",children:"// Tasks"}),`
`]}),e.exports.jsx(s.span,{className:"code-line",children:`
`}),e.exports.jsxs(s.span,{className:"code-line",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"return"})," ",e.exports.jsx(s.span,{className:"pl-c1",children:"true"}),`;
`]}),e.exports.jsx(s.span,{className:"code-line",children:`}
`})]})}),`
`,e.exports.jsx(s.p,{children:"Our stencil already parses the JSON scene file for you (highlighted above)."}),`
`,e.exports.jsxs(s.p,{children:["All that remains is for you to populate ",e.exports.jsx(s.code,{children:"renderData"}),". Referring to its struct definition in ",e.exports.jsx(s.code,{children:"sceneparser.h"})," will help greatly."]}),`
`,e.exports.jsxs(s.div,{className:"warning-callout callout",children:[e.exports.jsxs(s.p,{children:["Be aware that there is no ",e.exports.jsx(s.code,{children:"SceneData"})," struct. All of the information you need can be obtained by calling ",e.exports.jsx(s.code,{children:"fileReader"}),"'s methods; and you can find their declarations in ",e.exports.jsx(s.code,{children:"src/parser/scenefilereader.h"}),":"]}),e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-c",children:"// All the methods that you will be using, from class `ScenefileReader`"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["SceneGlobalData             ",e.exports.jsx(s.span,{className:"pl-en",children:"getGlobalData"}),"() ",e.exports.jsx(s.span,{className:"pl-k",children:"const"}),`;
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["SceneCameraData             ",e.exports.jsx(s.span,{className:"pl-en",children:"getCameraData"}),"() ",e.exports.jsx(s.span,{className:"pl-k",children:"const"}),`;
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["SceneNode*                  ",e.exports.jsx(s.span,{className:"pl-en",children:"getRootNode"}),"()   ",e.exports.jsx(s.span,{className:"pl-k",children:"const"}),`;
`]})]})})]}),`
`,e.exports.jsxs(s.div,{className:"task-callout callout",children:[e.exports.jsxs(s.p,{children:["The first step in populating ",e.exports.jsx(s.code,{children:"renderData"})," is to obtain global data and and camera data for the scene. In ",e.exports.jsx(s.code,{children:"SceneParser::parse()"}),", use the ",e.exports.jsx(s.code,{children:"fileReader"}),"'s methods to assign the following into fields in the ",e.exports.jsx(s.code,{children:"renderData"})," struct:"]}),e.exports.jsxs(s.ol,{children:[`
`,e.exports.jsx(s.li,{children:"Global data"}),`
`,e.exports.jsx(s.li,{children:"Camera data"}),`
`]})]}),`
`,e.exports.jsx(s.h4,{id:"traversing-the-scene-graph",children:e.exports.jsx(s.a,{href:"#traversing-the-scene-graph",children:"Traversing The Scene Graph"})}),`
`,e.exports.jsxs(s.p,{children:["Our next objective is to populate ",e.exports.jsx(s.code,{children:"renderData.shapes"}),", which is a ",e.exports.jsx(s.code,{children:"std::vector<RenderShapeData>"}),". To do this, we must traverse the scene graph and calculate the cumulative transformation matrix for each of the primitives."]}),`
`,e.exports.jsx(t,{images:[{src:"/labs/lab5/Array.png",alt:"TODO"}],figNumber:5,targetWidth:"75%",children:e.exports.jsxs(s.p,{children:["You can think of ",e.exports.jsx(s.code,{children:"renderData.shapes"})," as being a list of primitives and their CTMs."]})}),`
`,e.exports.jsxs(s.div,{className:"task-callout callout",children:[e.exports.jsx(s.div,{className:"warning-callout callout",children:e.exports.jsx(s.p,{children:"This is a much bigger task than the others in this lab. If you get stuck, remember that you can collaborate with others in this course!"})}),e.exports.jsxs(s.p,{children:["First, get the root node of the scene graph from the ",e.exports.jsx(s.code,{children:"fileReader"}),"."]}),e.exports.jsxs(s.p,{children:["Also, ",e.exports.jsx(s.code,{children:"clear()"})," ",e.exports.jsx(s.code,{children:"renderData.shapes"}),". You will be appending to this shortly."]}),e.exports.jsxs(s.p,{children:["Then, traverse the tree in a depth-first manner, starting from the root node of the scene graph. While you are traversing the tree, build your cumulative transformation; for each primitive you encounter, you should: (1) construct a ",e.exports.jsx(s.code,{children:"RenderShapeData"})," object using the primitive and its corresponding CTM, and (2) append the ",e.exports.jsx(s.code,{children:"RenderShapeData"})," onto ",e.exports.jsx(s.strong,{children:e.exports.jsx(s.code,{children:"renderData.shapes"})}),"."]}),e.exports.jsxs(s.p,{children:["Similarly, for each light you encounter (remember that each node in the scene graph contains primitives, lights, and transformations), you will also need to construct a ",e.exports.jsx(s.code,{children:"SceneLightData"})," object and append it onto ",e.exports.jsx(s.strong,{children:e.exports.jsx(s.code,{children:"renderData.lights"})}),"."]}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsxs(s.li,{children:["It will be ",e.exports.jsx(s.em,{children:"very"})," helpful to write a recursive helper function to do this."]}),`
`,e.exports.jsxs(s.li,{children:["When constructing ",e.exports.jsx(s.code,{children:"SceneLightData"})," for each light, the light's position and direction should be in world space."]}),`
`,e.exports.jsxs(s.li,{children:["If you do write a helper function, think carefully about whether you should be passing arguments ",e.exports.jsx(s.em,{children:"by reference"})," or ",e.exports.jsx(s.em,{children:"by value"}),"."]}),`
`]})]}),`
`,e.exports.jsx(s.h3,{id:"testing-scenes",children:e.exports.jsx(s.a,{href:"#testing-scenes",children:"Testing Scenes"})}),`
`,e.exports.jsxs(s.p,{children:["You should now be able to test if your parser is able to properly load scenes. You can load up any ",e.exports.jsx(s.code,{children:".json"})," file (like ",e.exports.jsx(s.code,{children:"primitive_salad_1.json"})," or ",e.exports.jsx(s.code,{children:"ambient_total.json"})," in the ",e.exports.jsx(s.code,{children:"resources"})," directory), by first running the lab, and then using ",e.exports.jsx(s.code,{children:"File > Open"})," in the window that pops up."]}),`
`,e.exports.jsx(s.div,{className:"warning-callout callout",children:e.exports.jsxs(s.p,{children:["Note: on macOS, the ",e.exports.jsx(s.code,{children:"File"})," option will be on the menu bar instead."]})}),`
`,e.exports.jsx(s.p,{children:"If all goes well, you should get outputs like these:"}),`
`,e.exports.jsx(t,{images:[{src:"/labs/lab5/direction-light-expected.png",alt:"TODO"},{src:"/labs/lab5/ambient-total-expected.png",alt:"TODO"},{src:"/labs/lab5/primitive-salad-expected.png",alt:"TODO"}],figNumber:6,children:e.exports.jsxs(s.p,{children:["What you should see if your parser can load ",e.exports.jsx(s.code,{children:"directional_light_1.json"}),", ",e.exports.jsx(s.code,{children:"ambient_total.json"}),", and ",e.exports.jsx(s.code,{children:"primitive_salad_1.json"})," correctly."]})}),`
`,e.exports.jsx(s.div,{className:"warning-callout callout",children:e.exports.jsx(s.p,{children:"Note: loading scenes into the window will help you test that your parser got the camera, primitives, and transformations right, but not necessarily the lights, since the shading done by our support code is very basic, and does not use the scene's lights."})}),`
`,e.exports.jsx(s.h2,{id:"extra-creating-your-own-3d-scenes",children:e.exports.jsx(s.a,{href:"#extra-creating-your-own-3d-scenes",children:"Extra: Creating Your Own 3D Scene(s)"})}),`
`,e.exports.jsxs(s.p,{children:[`You might want to work with the scenefiles directly for a final project, in order to create your own 3D scenes.
Scene files are written using the JSON format, which our `,e.exports.jsx(s.code,{children:"ScenefileReader"}),` reads for you.
You can refer to this lab for the conceptual aspects of scenefiles, but for the specifics of the JSON format, you should check out `,e.exports.jsx(s.a,{href:"/website-fall-23/docs/scenefile-documentation",children:"the dedicated page in the Docs tab"}),"."]}),`
`,e.exports.jsx(s.h2,{id:"end",children:e.exports.jsx(s.a,{href:"#end",children:"End"})}),`
`,e.exports.jsxs(s.p,{children:["Congrats on finishing the Parsing lab! Now, it's time to submit your code and get checked off by a TA. You should have your answers to all conceptual questions ready in your ",e.exports.jsx(s.code,{children:"README.md"})," file (tasks 1-3), show that task 4 prints out the correct sentences, and you should be able to show that your parser correctly loads scenes into the window."]}),`
`,e.exports.jsx(s.h2,{id:"submission",children:e.exports.jsx(s.a,{href:"#submission",children:"Submission"})}),`
`,e.exports.jsxs(s.p,{children:['Submit your GitHub link and commit ID to the "Lab 5: Parsing" assignment on Gradescope, ',e.exports.jsx(s.strong,{children:"then get checked off by a TA at hours"}),"."]}),`
`,e.exports.jsxs(s.p,{children:["Reference the GitHub + Gradescope Guide ",e.exports.jsx(s.a,{href:"/website-fall-23/docs/github-gradescope-guide#handing-in-assignments",children:"here"}),"."]}),`
`,e.exports.jsx(a,{}),e.exports.jsx(s.style,{children:`
mjx-container[jax="SVG"] {
  direction: ltr;
}

mjx-container[jax="SVG"] > svg {
  overflow: visible;
  min-height: 1px;
  min-width: 1px;
}

mjx-container[jax="SVG"] > svg a {
  fill: blue;
  stroke: blue;
}

mjx-container[jax="SVG"][display="true"] {
  display: block;
  text-align: center;
  margin: 1em 0;
}

mjx-container[jax="SVG"][display="true"][width="full"] {
  display: flex;
}

mjx-container[jax="SVG"][justify="left"] {
  text-align: left;
}

mjx-container[jax="SVG"][justify="right"] {
  text-align: right;
}

g[data-mml-node="merror"] > g {
  fill: red;
  stroke: red;
}

g[data-mml-node="merror"] > rect[data-background] {
  fill: yellow;
  stroke: none;
}

g[data-mml-node="mtable"] > line[data-line], svg[data-table] > g > line[data-line] {
  stroke-width: 70px;
  fill: none;
}

g[data-mml-node="mtable"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {
  stroke-width: 70px;
  fill: none;
}

g[data-mml-node="mtable"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {
  stroke-dasharray: 140;
}

g[data-mml-node="mtable"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {
  stroke-linecap: round;
  stroke-dasharray: 0,140;
}

g[data-mml-node="mtable"] > g > svg {
  overflow: visible;
}

[jax="SVG"] mjx-tool {
  display: inline-block;
  position: relative;
  width: 0;
  height: 0;
}

[jax="SVG"] mjx-tool > mjx-tip {
  position: absolute;
  top: 0;
  left: 0;
}

mjx-tool > mjx-tip {
  display: inline-block;
  padding: .2em;
  border: 1px solid #888;
  font-size: 70%;
  background-color: #F8F8F8;
  color: black;
  box-shadow: 2px 2px 5px #AAAAAA;
}

g[data-mml-node="maction"][data-toggle] {
  cursor: pointer;
}

mjx-status {
  display: block;
  position: fixed;
  left: 1em;
  bottom: 1em;
  min-width: 25%;
  padding: .2em .4em;
  border: 1px solid #888;
  font-size: 90%;
  background-color: #F8F8F8;
  color: black;
}

foreignObject[data-mjx-xml] {
  font-family: initial;
  line-height: normal;
  overflow: visible;
}

mjx-container[jax="SVG"] path[data-c], mjx-container[jax="SVG"] use[data-c] {
  stroke-width: 3;
}
`})]})]})}function d(n={}){const{wrapper:s}=n.components||{};return s?e.exports.jsx(s,Object.assign({},n,{children:e.exports.jsx(r,n)})):r(n)}export{d as default,c as documentProps};
